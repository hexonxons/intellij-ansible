/* The following code was generated by JFlex 1.4.3 on 3/16/16 10:43 PM */

package lv.kid.vermut.intellij.yaml.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_ARRAY_BULLET;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_ASSIGNMENT;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_COLON;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_COMMENT;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_HEADER;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_INDENT;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_ITEM_DELIMITER;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_LBRACE_CURLY;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_LBRACE_JINJA;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_LBRACE_SQUARE;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_LINE_CONTINUATION;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_LITERAL;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_RBRACE_CURLY;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_RBRACE_JINJA;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_RBRACE_SQUARE;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_STRING;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_TAG;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_UNKNOWN;
import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.NEON_WHITESPACE;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/16/16 10:43 PM from the specification file
 * <tt>/Users/admin/IdeaProjects/intellij-ansible/src/main/java/lv/kid/vermut/intellij/yaml/lexer/neon.flex</tt>
 */
public class _NeonLexer implements FlexLexer {
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int[] ZZ_LEXSTATE = {
            0, 1, 2, 2, 3, 3, 4, 4
    };
    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\17\1\12\1\5\2\22\1\20\16\17\4\34\1\12\1\25\1\3" +
                    "\1\7\1\15\1\11\1\0\1\1\1\0\1\27\2\0\1\2\1\10" +
                    "\2\0\12\16\1\26\2\0\1\24\1\31\2\0\32\15\1\33\1\4" +
                    "\1\30\1\0\1\15\1\13\32\15\1\14\1\32\1\6\1\0\6\16" +
                    "\1\23\32\16\2\0\4\15\4\0\1\15\2\0\1\16\7\0\1\15" +
                    "\4\0\1\15\5\0\27\15\1\0\37\15\1\0\u01ca\15\4\0\14\15" +
                    "\16\0\5\15\7\0\1\15\1\0\1\15\21\0\160\16\5\15\1\0" +
                    "\2\15\2\0\4\15\10\0\1\15\1\0\3\15\1\0\1\15\1\0" +
                    "\24\15\1\0\123\15\1\0\213\15\1\0\5\16\2\0\236\15\11\0" +
                    "\46\15\2\0\1\15\7\0\47\15\7\0\1\15\1\0\55\16\1\0" +
                    "\1\16\1\0\2\16\1\0\2\16\1\0\1\16\10\0\33\15\5\0" +
                    "\3\15\15\0\5\16\6\0\1\15\4\0\13\16\5\0\53\15\37\16" +
                    "\4\0\2\15\1\16\143\15\1\0\1\15\10\16\1\0\6\16\2\15" +
                    "\2\16\1\0\4\16\2\15\12\16\3\15\2\0\1\15\17\0\1\16" +
                    "\1\15\1\16\36\15\33\16\2\0\131\15\13\16\1\15\16\0\12\16" +
                    "\41\15\11\16\2\15\4\0\1\15\5\0\26\15\4\16\1\15\11\16" +
                    "\1\15\3\16\1\15\5\16\22\0\31\15\3\16\104\0\1\15\1\0" +
                    "\13\15\67\0\33\16\1\0\4\16\66\15\3\16\1\15\22\16\1\15" +
                    "\7\16\12\15\2\16\2\0\12\16\1\0\7\15\1\0\7\15\1\0" +
                    "\3\16\1\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0" +
                    "\1\15\3\0\4\15\2\0\1\16\1\15\7\16\2\0\2\16\2\0" +
                    "\3\16\1\15\10\0\1\16\4\0\2\15\1\0\3\15\2\16\2\0" +
                    "\12\16\4\15\7\0\1\15\5\0\3\16\1\0\6\15\4\0\2\15" +
                    "\2\0\26\15\1\0\7\15\1\0\2\15\1\0\2\15\1\0\2\15" +
                    "\2\0\1\16\1\0\5\16\4\0\2\16\2\0\3\16\3\0\1\16" +
                    "\7\0\4\15\1\0\1\15\7\0\14\16\3\15\1\16\13\0\3\16" +
                    "\1\0\11\15\1\0\3\15\1\0\26\15\1\0\7\15\1\0\2\15" +
                    "\1\0\5\15\2\0\1\16\1\15\10\16\1\0\3\16\1\0\3\16" +
                    "\2\0\1\15\17\0\2\15\2\16\2\0\12\16\1\0\1\15\17\0" +
                    "\3\16\1\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0" +
                    "\2\15\1\0\5\15\2\0\1\16\1\15\7\16\2\0\2\16\2\0" +
                    "\3\16\10\0\2\16\4\0\2\15\1\0\3\15\2\16\2\0\12\16" +
                    "\1\0\1\15\20\0\1\16\1\15\1\0\6\15\3\0\3\15\1\0" +
                    "\4\15\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0" +
                    "\3\15\3\0\14\15\4\0\5\16\3\0\3\16\1\0\4\16\2\0" +
                    "\1\15\6\0\1\16\16\0\12\16\11\0\1\15\7\0\3\16\1\0" +
                    "\10\15\1\0\3\15\1\0\27\15\1\0\12\15\1\0\5\15\3\0" +
                    "\1\15\7\16\1\0\3\16\1\0\4\16\7\0\2\16\1\0\2\15" +
                    "\6\0\2\15\2\16\2\0\12\16\22\0\2\16\1\0\10\15\1\0" +
                    "\3\15\1\0\27\15\1\0\12\15\1\0\5\15\2\0\1\16\1\15" +
                    "\7\16\1\0\3\16\1\0\4\16\7\0\2\16\7\0\1\15\1\0" +
                    "\2\15\2\16\2\0\12\16\1\0\2\15\17\0\2\16\1\0\10\15" +
                    "\1\0\3\15\1\0\51\15\2\0\1\15\7\16\1\0\3\16\1\0" +
                    "\4\16\1\15\10\0\1\16\10\0\2\15\2\16\2\0\12\16\12\0" +
                    "\6\15\2\0\2\16\1\0\22\15\3\0\30\15\1\0\11\15\1\0" +
                    "\1\15\2\0\7\15\3\0\1\16\4\0\6\16\1\0\1\16\1\0" +
                    "\10\16\22\0\2\16\15\0\60\15\1\16\2\15\7\16\4\0\10\15" +
                    "\10\16\1\0\12\16\47\0\2\15\1\0\1\15\2\0\2\15\1\0" +
                    "\1\15\2\0\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0" +
                    "\1\15\1\0\1\15\2\0\2\15\1\0\4\15\1\16\2\15\6\16" +
                    "\1\0\2\16\1\15\2\0\5\15\1\0\1\15\1\0\6\16\2\0" +
                    "\12\16\2\0\4\15\40\0\1\15\27\0\2\16\6\0\12\16\13\0" +
                    "\1\16\1\0\1\16\1\0\1\16\4\0\2\16\10\15\1\0\44\15" +
                    "\4\0\24\16\1\0\2\16\5\15\13\16\1\0\44\16\11\0\1\16" +
                    "\71\0\53\15\24\16\1\15\12\16\6\0\6\15\4\16\4\15\3\16" +
                    "\1\15\3\16\2\15\7\16\3\15\4\16\15\15\14\16\1\15\17\16" +
                    "\2\0\46\15\1\0\1\15\5\0\1\15\2\0\53\15\1\0\u014d\15" +
                    "\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\51\15" +
                    "\1\0\4\15\2\0\41\15\1\0\4\15\2\0\7\15\1\0\1\15" +
                    "\1\0\4\15\2\0\17\15\1\0\71\15\1\0\4\15\2\0\103\15" +
                    "\2\0\3\16\40\0\20\15\20\0\125\15\14\0\u026c\15\2\0\21\15" +
                    "\1\0\32\15\5\0\113\15\3\0\3\15\17\0\15\15\1\0\4\15" +
                    "\3\16\13\0\22\15\3\16\13\0\22\15\2\16\14\0\15\15\1\0" +
                    "\3\15\1\0\2\16\14\0\64\15\40\16\3\0\1\15\3\0\2\15" +
                    "\1\16\2\0\12\16\41\0\3\16\2\0\12\16\6\0\130\15\10\0" +
                    "\51\15\1\16\1\15\5\0\106\15\12\0\35\15\3\0\14\16\4\0" +
                    "\14\16\12\0\12\16\36\15\2\0\5\15\13\0\54\15\4\0\21\16" +
                    "\7\15\2\16\6\0\12\16\46\0\27\15\5\16\4\0\65\15\12\16" +
                    "\1\0\35\16\2\0\13\16\6\0\12\16\15\0\1\15\130\0\5\16" +
                    "\57\15\21\16\7\15\4\0\12\16\21\0\11\16\14\0\3\16\36\15" +
                    "\15\16\2\15\12\16\54\15\16\16\14\0\44\15\24\16\10\0\12\16" +
                    "\3\0\3\15\12\16\44\15\122\0\3\16\1\0\25\16\4\15\1\16" +
                    "\4\15\3\16\2\15\11\0\300\15\47\16\25\0\4\16\u0116\15\2\0" +
                    "\6\15\2\0\46\15\2\0\6\15\2\0\10\15\1\0\1\15\1\0" +
                    "\1\15\1\0\1\15\1\0\37\15\2\0\65\15\1\0\7\15\1\0" +
                    "\1\15\3\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15\4\0" +
                    "\15\15\5\0\3\15\1\0\7\15\16\0\5\16\30\0\2\21\5\16" +
                    "\20\0\2\15\23\0\1\15\13\0\5\16\5\0\6\16\1\0\1\15" +
                    "\15\0\1\15\20\0\15\15\3\0\33\15\25\0\15\16\4\0\1\16" +
                    "\3\0\14\16\21\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15" +
                    "\3\0\5\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15" +
                    "\1\0\13\15\2\0\4\15\5\0\5\15\4\0\1\15\21\0\51\15" +
                    "\u0a77\0\57\15\1\0\57\15\1\0\205\15\6\0\4\15\3\16\2\15" +
                    "\14\0\46\15\1\0\1\15\5\0\1\15\2\0\70\15\7\0\1\15" +
                    "\17\0\1\16\27\15\11\0\7\15\1\0\7\15\1\0\7\15\1\0" +
                    "\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0" +
                    "\40\16\57\0\1\15\u01d5\0\3\15\31\0\11\15\6\16\1\0\5\15" +
                    "\2\0\5\15\4\0\126\15\2\0\2\16\2\0\3\15\1\0\132\15" +
                    "\1\0\4\15\5\0\51\15\3\0\136\15\21\0\33\15\65\0\20\15" +
                    "\u0200\0\u19b6\15\112\0\u51cd\15\63\0\u048d\15\103\0\56\15\2\0\u010d\15" +
                    "\3\0\20\15\12\16\2\15\24\0\57\15\1\16\4\0\12\16\1\0" +
                    "\31\15\7\0\1\16\120\15\2\16\45\0\11\15\2\0\147\15\2\0" +
                    "\4\15\1\0\4\15\14\0\13\15\115\0\12\15\1\16\3\15\1\16" +
                    "\4\15\1\16\27\15\5\16\20\0\1\15\7\0\64\15\14\0\2\16" +
                    "\62\15\21\16\13\0\12\16\6\0\22\16\6\15\3\0\1\15\4\0" +
                    "\12\16\34\15\10\16\2\0\27\15\15\16\14\0\35\15\3\0\4\16" +
                    "\57\15\16\16\16\0\1\15\12\16\46\0\51\15\16\16\11\0\3\15" +
                    "\1\16\10\15\2\16\2\0\12\16\6\0\27\15\3\0\1\15\1\16" +
                    "\4\0\60\15\1\16\1\15\3\16\2\15\2\16\5\15\2\16\1\15" +
                    "\1\16\1\15\30\0\3\15\2\0\13\15\5\16\2\0\3\15\2\16" +
                    "\12\0\6\15\2\0\6\15\2\0\6\15\11\0\7\15\1\0\7\15" +
                    "\221\0\43\15\10\16\1\0\2\16\2\0\12\16\6\0\u2ba4\15\14\0" +
                    "\27\15\4\0\61\15\u2104\0\u016e\15\2\0\152\15\46\0\7\15\14\0" +
                    "\5\15\5\0\1\15\1\16\12\15\1\0\15\15\1\0\5\15\1\0" +
                    "\1\15\1\0\2\15\1\0\2\15\1\0\154\15\41\0\u016b\15\22\0" +
                    "\100\15\2\0\66\15\50\0\15\15\3\0\20\16\20\0\7\16\14\0" +
                    "\2\15\30\0\3\15\31\0\1\15\6\0\5\15\1\0\207\15\2\0" +
                    "\1\16\4\0\1\15\13\0\12\16\7\0\32\15\4\0\1\15\1\0" +
                    "\32\15\13\0\131\15\3\0\6\15\2\0\6\15\2\0\6\15\2\0" +
                    "\3\15\3\0\2\15\3\0\2\15\22\0\3\16\4\0";
    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\4\0\1\1\2\2\1\3\1\2\1\4\1\5\1\6" +
                    "\2\2\1\7\1\10\1\11\1\2\1\12\1\10\1\2" +
                    "\1\13\2\14\1\15\1\16\1\17\2\20\1\17\2\20" +
                    "\1\21\2\22\1\23\1\22\1\23\1\22\1\24\1\23" +
                    "\1\25\1\26\1\27\3\26\1\1\2\27\1\30\1\0" +
                    "\1\31\2\0\1\32\1\33\1\0\1\33\1\34\1\0" +
                    "\1\35\1\16\2\36\1\16\1\32\1\37\1\40\1\0" +
                    "\1\40\2\0\1\41\2\42\1\0\1\43\2\0\1\44" +
                    "\1\45\1\46\4\0\1\47\1\0\1\50";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\221" +
                    "\0\313\0\350\0\u0105\0\u0122\0\u013f\0\u0105\0\u015c\0\221" +
                    "\0\u0179\0\u0196\0\221\0\u01b3\0\u01d0\0\221\0\221\0\u01ed" +
                    "\0\221\0\u020a\0\u0227\0\221\0\u0244\0\u0261\0\u027e\0\u029b" +
                    "\0\u02b8\0\221\0\u02d5\0\221\0\u02f2\0\u030f\0\u030f\0\u032c" +
                    "\0\u0349\0\221\0\221\0\221\0\u0366\0\u0383\0\u03a0\0\u03bd" +
                    "\0\u03da\0\u03bd\0\221\0\256\0\221\0\313\0\u03f7\0\221" +
                    "\0\221\0\u0414\0\u0431\0\221\0\u0196\0\221\0\u044e\0\221" +
                    "\0\u046b\0\u0488\0\u0488\0\221\0\221\0\u0244\0\u0244\0\u027e" +
                    "\0\u029b\0\221\0\u04a5\0\221\0\u02d5\0\221\0\u02f2\0\u04c2" +
                    "\0\221\0\221\0\221\0\u0366\0\u0383\0\u03a0\0\u04df\0\u04fc" +
                    "\0\u0519\0\221";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\1\7\1\10\1\11\1\6\1\12\1\13\1\14" +
                    "\1\15\1\16\1\17\1\20\1\21\1\22\1\6\2\20" +
                    "\1\6\1\20\1\6\1\23\1\24\1\25\1\6\1\26" +
                    "\1\27\1\30\1\31\1\20\1\6\1\7\1\10\1\11" +
                    "\1\6\1\12\1\13\1\14\1\15\1\32\1\17\1\20" +
                    "\1\21\1\22\1\6\2\20\1\6\1\20\1\6\1\23" +
                    "\1\24\1\25\1\6\1\26\1\27\1\30\1\31\1\20" +
                    "\2\33\1\34\2\33\1\34\1\35\2\33\1\36\1\37" +
                    "\1\33\1\40\2\33\2\34\1\33\1\34\3\33\1\41" +
                    "\1\33\1\34\3\33\1\34\1\42\1\43\1\44\1\45" +
                    "\1\42\1\44\1\46\1\44\1\42\1\47\1\50\1\44" +
                    "\1\51\2\42\2\44\1\42\1\44\1\42\1\52\1\44" +
                    "\2\42\1\44\2\42\2\44\5\53\1\54\1\55\2\53" +
                    "\1\55\1\56\1\53\1\57\3\60\1\61\2\54\1\62" +
                    "\1\63\10\53\35\0\1\64\1\65\1\0\2\64\1\0" +
                    "\27\64\2\66\1\0\1\65\1\67\2\0\5\66\1\0" +
                    "\20\66\12\0\1\12\30\0\1\70\26\0\5\14\1\0" +
                    "\27\14\5\0\1\71\2\0\1\72\1\0\1\71\5\0" +
                    "\1\73\3\71\23\0\1\17\33\0\1\74\2\0\1\74" +
                    "\35\0\3\75\3\0\1\75\1\76\25\0\1\77\21\0" +
                    "\1\100\2\0\2\100\3\0\1\100\5\0\1\101\3\100" +
                    "\3\0\2\100\16\0\1\30\22\0\5\102\1\0\1\103" +
                    "\26\102\2\33\1\0\2\33\2\0\3\33\1\0\1\33" +
                    "\1\0\2\33\2\0\1\33\1\0\3\33\1\0\1\33" +
                    "\1\0\3\33\7\0\1\104\26\0\2\33\1\0\2\33" +
                    "\1\0\1\104\3\33\1\0\1\33\1\0\2\33\2\0" +
                    "\1\33\1\0\3\33\1\0\1\33\1\0\3\33\1\0" +
                    "\2\105\1\0\2\105\1\0\1\106\1\0\1\105\1\107" +
                    "\1\110\1\105\1\111\2\105\2\0\1\105\1\0\3\105" +
                    "\1\0\1\105\1\0\3\105\12\0\1\104\2\0\1\104" +
                    "\22\0\1\112\2\0\2\112\3\0\1\112\5\0\1\113" +
                    "\3\114\3\0\2\112\4\0\1\115\1\116\1\0\2\115" +
                    "\1\0\27\115\2\117\1\0\1\116\1\120\2\0\5\117" +
                    "\1\0\20\117\6\0\1\121\40\0\1\50\33\0\1\122" +
                    "\2\0\1\122\26\0\1\123\34\0\1\124\2\0\1\124" +
                    "\1\125\1\0\1\126\1\127\30\0\1\123\2\0\1\123" +
                    "\35\0\3\60\3\0\1\60\16\0\1\54\27\0\5\66" +
                    "\1\0\27\66\10\0\1\130\31\0\1\71\44\0\3\77" +
                    "\3\0\1\77\16\0\1\100\27\0\5\102\1\0\27\102" +
                    "\5\0\1\114\27\0\5\117\1\0\27\117\12\0\1\131" +
                    "\2\0\3\127\3\0\1\127\1\132\10\0\5\130\1\0" +
                    "\27\130\12\0\1\131\11\0\1\132\10\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\4\0\1\1\1\11\1\1\1\11\7\1\1\11\2\1" +
                    "\1\11\2\1\2\11\1\1\1\11\2\1\1\11\5\1" +
                    "\1\11\1\1\1\11\5\1\3\11\6\1\1\11\1\0" +
                    "\1\11\2\0\2\11\1\0\1\1\1\11\1\0\1\11" +
                    "\1\1\1\11\3\1\2\11\1\0\1\1\2\0\1\11" +
                    "\1\1\1\11\1\0\1\11\2\0\3\11\4\0\1\1" +
                    "\1\0\1\11";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /**
     * lexical states
     */
    public static final int IN_ASSIGNMENT_LITERAL = 6;
    public static final int IN_LITERAL = 2;
    public static final int YYINITIAL = 0;
    public static final int IN_ASSIGNMENT = 4;
    private static java.io.Reader zzReader = null; // Fake
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /* user code: */
    private final int yycolumn = 0;
    private int a = 0;

    public _NeonLexer(java.io.Reader in) {
        zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public _NeonLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[90];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[90];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[1334];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[90];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 2196) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    private void retryInState(int newState) {
        yybegin(newState);
        yypushback(yylength());
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    @Override
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the current lexical state.
     */
    @Override
    public final int yystate() {
        return zzLexicalState;
    }

    @Override
    public final int getTokenStart() {
        return zzStartRead;
    }

    @Override
    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    @Override
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            if (zzMarkedPosL > zzStartRead) {
                switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL - 1] : zzBufferL.charAt(zzMarkedPosL - 1))) {
                    case '\n':
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        zzAtBOL = true;
                        break;
                    case '\r':
                        if (zzMarkedPosL < zzEndReadL) {
                            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
                        } else if (zzAtEOF) {
                            zzAtBOL = false;
                        } else {
                            boolean eof = zzRefill();
                            zzMarkedPosL = zzMarkedPos;
                            zzEndReadL = zzEndRead;
                            zzBufferL = zzBuffer;
                            if (eof) {
                                zzAtBOL = false;
                            } else {
                                zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
                            }
                        }
                        break;
                    default:
                        zzAtBOL = false;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            if (zzAtBOL) {
                zzState = ZZ_LEXSTATE[zzLexicalState + 1];
            } else {
                zzState = ZZ_LEXSTATE[zzLexicalState];
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }
                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 34:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 1;
                    a = 305;
                    retryInState(YYINITIAL);
                case 41:
                    break;
                case 28: {
                    a = 111;
                    return NEON_LBRACE_JINJA;
                }
                case 42:
                    break;
                case 39: {
                    return NEON_HEADER;
                }
                case 43:
                    break;
                case 37: {
                    a = 411;
                    return NEON_LBRACE_JINJA;
                }
                case 44:
                    break;
                case 29: {
                    a = 2;
                    retryInState(IN_ASSIGNMENT);
                }
                case 45:
                    break;
                case 38: {
                    a = 5011;
                    retryInState(IN_ASSIGNMENT);
                }
                case 46:
                    break;
                case 19: {
                    a = 406;
                    retryInState(YYINITIAL);
                }
                case 47:
                    break;
                case 2: {
                    yybegin(IN_LITERAL);
                    return NEON_LITERAL;
                }
                case 48:
                    break;
                case 6: {
                    return NEON_COMMENT;
                }
                case 49:
                    break;
                case 13: {
                    return NEON_LBRACE_SQUARE;
                }
                case 50:
                    break;
                case 27:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 1;
                    return NEON_ARRAY_BULLET;
                case 51:
                    break;
                case 9: {
                    return NEON_LBRACE_CURLY;
                }
                case 52:
                    break;
                case 14: {
                    return NEON_TAG;
                }
                case 53:
                    break;
                case 18: {
                    a = 405;
                    retryInState(IN_ASSIGNMENT_LITERAL);
                    return NEON_LITERAL;
                }
                case 54:
                    break;
                case 8: {
                    return NEON_UNKNOWN;
                }
                case 55:
                    break;
                case 33: {
                    a = 304;
                    retryInState(YYINITIAL);
                }
                case 56:
                    break;
                case 20: {
                    a = 403;
                    return NEON_WHITESPACE;
                }
                case 57:
                    break;
                case 10: {
                    return NEON_ASSIGNMENT;
                }
                case 58:
                    break;
                case 30:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 1;
                    return NEON_COLON;
                case 59:
                    break;
                case 5: {
                    return NEON_RBRACE_CURLY;
                }
                case 60:
                    break;
                case 26: {
                    a = 112;
                    return NEON_RBRACE_JINJA;
                }
                case 61:
                    break;
                case 35: {
                    a = 401;
                    return NEON_STRING;
                }
                case 62:
                    break;
                case 36: {
                    a = 412;
                    return NEON_RBRACE_JINJA;
                }
                case 63:
                    break;
                case 16: {
                    a = 307;
                    retryInState(YYINITIAL);
                }
                case 64:
                    break;
                case 32: {
                    a = 303;
                }
                case 65:
                    break;
                case 17: {
                    a = 306;
                }
                case 66:
                    break;
                case 7: {
                    return NEON_WHITESPACE;
                }
                case 67:
                    break;
                case 4: {
                    return NEON_INDENT;
                }
                case 68:
                    break;
                case 11: {
                    return NEON_RBRACE_SQUARE;
                }
                case 69:
                    break;
                case 40: {
                    a = 501;
                    retryInState(IN_ASSIGNMENT);
                }
                case 70:
                    break;
                case 22: {
                    a = 505;
                }
                case 71:
                    break;
                case 21: {
                    a = 402;
                    return NEON_ASSIGNMENT;
                }
                case 72:
                    break;
                case 24: {
                    a = 502;
                    retryInState(IN_ASSIGNMENT);
                }
                case 73:
                    break;
                case 25: {
                    return NEON_STRING;
                }
                case 74:
                    break;
                case 3: {
                    return NEON_ITEM_DELIMITER;
                }
                case 75:
                    break;
                case 15: {
                    a = 302;
                }
                case 76:
                    break;
                case 31: {
                    a = 3011;
                    retryInState(YYINITIAL);
                }
                case 77:
                    break;
                case 12: {
                    return NEON_LINE_CONTINUATION;
                }
                case 78:
                    break;
                case 1: {
                    a = 504;
                }
                case 79:
                    break;
                case 23: {
                    a = 503;
                    retryInState(IN_ASSIGNMENT);
                }
                case 80:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

    @Override
    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }
}
